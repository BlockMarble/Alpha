* sublime 이나 npp 로 볼것 

2018-09-17

creator.sol 

	- 상태 : 더미 값을 가져오게끔 설계되어 있음 
	
	- 주소 : 0x7b4e1c497dd68b6fa8bb034f46fc1280e4ce9326

	- ABI : [ { "constant": false, "inputs": [ { "name": "mapid", "type": "uint256" }, { "name": "wait", "type": "uint256" } ], "name": "createGame", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [ { "name": "page", "type": "uint256" } ], "name": "fetchGames", "outputs": [ { "name": "list", "type": "address[10]" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [ { "name": "width", "type": "uint256" }, { "name": "height", "type": "uint256" }, { "name": "playermin", "type": "uint256" }, { "name": "playermax", "type": "uint256" }, { "name": "dicemin", "type": "uint256" }, { "name": "dicemax", "type": "uint256" }, { "name": "walls", "type": "uint256[]" }, { "name": "prices", "type": "uint256[]" } ], "name": "createMap", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [ { "name": "id", "type": "uint256" } ], "name": "fetchMap", "outputs": [ { "name": "info", "type": "uint256[6]" }, { "name": "walls", "type": "uint256[]" }, { "name": "prices", "type": "uint256[]" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "inputs": [], "payable": false, "stateMutability": "nonpayable", "type": "constructor" } ]
		

	- 함수 설명 : 
		

	    function fetchGames(uint page) public returns (address[10] list)
	    	- 클라이언트에서 페이지값 (1,2,3 ...) 을 넘기면 해당 페이지에 있는 10개의 개설된 게임 주소를 가져온다. 
	    
	    function createGame(uint mapid,  uint playermin, uint playermax, uint wait) public returns ()
	    	- 맵 id 와 최소/최대인원, 최소인원 충족 후 대기 시간을 지정해서 넘기면 게임 컨트랙트를 생성한다. 
	        - 주소 반환 기능은 추후 추가함
	        
	    
	    function fetchMap(uint id) public view returns (uint[6] info,uint[] walls,uint[] prices)
	    	- 클라이언트에서 맵의 아이디값 (1,2,3..)을 넘기면 맵의 정보를 가져온다. 
	    	- 구조는 
	    		info = [너비,높이,주사위최소,주사위최대]
	    		walls = [255(0b00..001111111),129(0b00..001000001),129,129,129,255]
	    		prices = [110000,120000, ...]

	    	- 현재는 하나의 256bit uint 에서 작은 비트 부터 왼쪽을 의미함
	    	- 넘치는 비트는 버림 
	    		- 10X10을 표현하기 위해는 총 10개의 uint 가 필요함 
	    		- 257X10을 표현하기 위해서는 총 20개의 uint 가 필요함 
	    	- 포맷 방식 변경 원할 시 요청해주세요
	    		ex) 0b00000...00111 => 왼쪽부터 3개의 비트가 벽이 아님 
	    	- 현재  solidity 는 struct 반환이 안되기 때문에 이게 최선  	

	    function createMap(uint width, uint height,uint dicemin, uint dicemax, uint[] walls, uint[] prices) public returns (){
	        - 너비 높이 주사위 최소 최대 벽위치 각 땅 가격을 넘기면 해당하는 맵을 생성한다. 
	    	- 맵 id 반환 기능은 추후 추가함



2018-09-18 

creator.sol 

	
	- 업데이트 : createGame 함수를 실행시 creation event 를 발생시킴 web3의 필터를 통해 생성된 게임컨트랙트를 받을 수 있음 
	
	- 주소 : 0x7ca7a64b11deb031c410ae85e0c234cb2bcfb388

	- ABI : [ { "constant": false, "inputs": [ { "name": "mapid", "type": "uint256" }, { "name": "wait", "type": "uint256" } ], "name": "createGame", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "width", "type": "uint256" }, { "name": "height", "type": "uint256" }, { "name": "playermin", "type": "uint256" }, { "name": "playermax", "type": "uint256" }, { "name": "dicemin", "type": "uint256" }, { "name": "dicemax", "type": "uint256" }, { "name": "walls", "type": "uint256[]" }, { "name": "prices", "type": "uint256[]" } ], "name": "createMap", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "anonymous": false, "inputs": [ { "indexed": true, "name": "id", "type": "uint256" }, { "indexed": true, "name": "owner", "type": "address" }, { "indexed": true, "name": "addr", "type": "address" } ], "name": "creation", "type": "event" }, { "inputs": [], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }, { "constant": true, "inputs": [], "name": "aaa", "outputs": [ { "name": "a", "type": "uint256[]" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [ { "name": "page", "type": "uint256" } ], "name": "fetchGames", "outputs": [ { "name": "list", "type": "address[10]" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [ { "name": "id", "type": "uint256" } ], "name": "fetchMap", "outputs": [ { "name": "info", "type": "uint256[6]" }, { "name": "walls", "type": "uint256[]" }, { "name": "prices", "type": "uint256[]" } ], "payable": false, "stateMutability": "view", "type": "function" } ]
		
		
2018-09-19


creator.sol

 	- 업데이트 : 이제 벽의 값을 256 비트 꽉 채워서 전달함 ex) 256개 이하의 벽정보는 하나의 uint로 전달함 

 	- 주소 : 0xa0bb1671d29fee1baeeb2383fd592d1b7ca37cf4

 	- ABI : [ { "constant": false, "inputs": [ { "name": "mapid", "type": "uint256" }, { "name": "wait", "type": "uint256" } ], "name": "createGame", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "width", "type": "uint256" }, { "name": "height", "type": "uint256" }, { "name": "playermin", "type": "uint256" }, { "name": "playermax", "type": "uint256" }, { "name": "dicemin", "type": "uint256" }, { "name": "dicemax", "type": "uint256" }, { "name": "walls", "type": "uint256[]" }, { "name": "prices", "type": "uint256[]" } ], "name": "createMap", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "anonymous": false, "inputs": [ { "indexed": true, "name": "id", "type": "uint256" }, { "indexed": true, "name": "owner", "type": "address" }, { "indexed": true, "name": "addr", "type": "address" } ], "name": "creation", "type": "event" }, { "inputs": [], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }, { "constant": true, "inputs": [], "name": "aaa", "outputs": [ { "name": "a", "type": "uint256[]" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [ { "name": "page", "type": "uint256" } ], "name": "fetchGames", "outputs": [ { "name": "list", "type": "address[10]" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [ { "name": "id", "type": "uint256" } ], "name": "fetchMap", "outputs": [ { "name": "info", "type": "uint256[6]" }, { "name": "walls", "type": "uint256[]" }, { "name": "prices", "type": "uint256[]" } ], "payable": false, "stateMutability": "view", "type": "function" } ]



 2018-09-20
 
 Game.sol	
    
    - 상태 : 아직 배포 안됨 함수와 이벤트 리스트만 작성함 

	- 함수 
		function start()

			방장이 날리는 명령, 시작이 성공하면 DiceGen 이벤트 발생 

			실패시  StartFail 이벤트 발생 

		function viewBoard()
			
			DiceGen 이벤트가 발생하고 나서부터 호출할 수 있다. 

			아래의 세 배열은 플레이어의 들어온 순서를 인덱스로 한다. 0<=x<(총플레이어수)

				플레이어 주소 목록 
					[0x... , 0x.... , ...]

				플레이어 현금 목록 
					[10000, 200000, 30000, ...]

				플레이어 위치 목록 
					[[2,3],[2,5],[11,20],...]


			아래의 두 배열은 땅의 아이디 0<=x<(땅의 갯수) 를 인덱스로 한다. 

				땅의 소유자 목록
					[0x... ,0x ... , 0x....]

				땅의 빌딩수 목록 
					[2,3,0,0,0,0,3,1,3,.....]



			총 다섯개의 배열을 반환함 

				[[],[],[],[],[]]

		function join()
		 	
		 	msg.sender를 참여 시킴 

		 	최대인원 초과 등의 이유로 실패시 JoinResult(false) event 발생 

		 	성공시 JoinResult(true) event 발생 


		function action(uint8[] actionids, uint[] params) public

			실행할 명령들의 모음을 보내고 성공 실패 이벤트를 발생시킴

				성공시 ActionResult(true); 

			명령 모음 : 

				좌 , 상 , 우 , 하 = 1 , 2 , 3 , 4 

					params : 1~dicemax 사이의 숫자 

					이동 명령의 총합이 항상 받은 dice의 값과 같거나 커야함 더 클시 이동하다 멈춤 

					이동은 항상 온 방향과는 다른 방향이어야함 즉 오른쪽으로 갔다가 왼쪽으로 가기 위쪽으로 갔다가 아래쪽으로 가기 는 안됨  

				5 : 입찰 

					params : 1~보유 현금 사이의 숫자 

				6 : 매각 

					params : 땅의 id (1~총 땅 갯수)

				7 : 짓기 

					params : 갯수(1~5) 
		 	
					- 현재는 한가지 부동산만 지원 

    - 이벤트 :    
	    
	    event는 하나로 통일함 

	    event GameEvent(uint indexed type_,address indexed addr);
	    
	    아래의 각 상황에서 날라오는 토픽, web3의 filter를 통해 잡고자 하는 이벤트만 골라잡으면 된다. ( 필터 샘플 참고 )

	        Dicegen = 0 , address(this)
	        
	        StartFail = 1 , address(this)
	        
	        JoinSuccess = 2 , playeraddr
	        
	        JoinFail = 3 , playeraddr 
	        
	        MoveSuccess = 5, playeraddr
	        
	        MoveFail = 6 , playeraddr
	    
	        
	        
	    

2018-10-01
	
	Game.sol

		주소 : 0x486e3b36e739c3d059175947b5e7a8b467cebdb9


		ABI : [ { "anonymous": false, "inputs": [ { "indexed": true, "name": "type_", "type": "uint256" }, { "indexed": true, "name": "addr", "type": "address" } ], "name": "GameEvent", "type": "event" }, { "constant": false, "inputs": [ { "name": "actionids", "type": "uint8[]" }, { "name": "params", "type": "uint256[]" } ], "name": "action", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "actionids", "type": "uint8[]" }, { "name": "params", "type": "uint256[]" }, { "name": "sender", "type": "address" } ], "name": "action_i", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [], "name": "join", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "sender", "type": "address" } ], "name": "join_i", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [], "name": "start", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [], "name": "sum_moves_i", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }, { "constant": true, "inputs": [ { "name": "", "type": "address" } ], "name": "addrids", "outputs": [ { "name": "", "type": "uint8" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [ { "name": "", "type": "uint256" }, { "name": "", "type": "uint256" } ], "name": "board", "outputs": [ { "name": "", "type": "uint16" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [ { "name": "", "type": "uint256" } ], "name": "built", "outputs": [ { "name": "", "type": "uint16" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [ { "name": "", "type": "address" } ], "name": "camefroms", "outputs": [ { "name": "", "type": "uint8" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [ { "name": "", "type": "address" } ], "name": "cashes", "outputs": [ { "name": "", "type": "uint32" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [ { "name": "", "type": "address" } ], "name": "dices", "outputs": [ { "name": "", "type": "uint8" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [ { "name": "", "type": "uint256" } ], "name": "highest_bid", "outputs": [ { "name": "", "type": "uint32" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [ { "name": "", "type": "uint256" } ], "name": "highest_bidder", "outputs": [ { "name": "", "type": "address" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "numDone", "outputs": [ { "name": "", "type": "uint8" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [ { "name": "", "type": "uint256" } ], "name": "owners", "outputs": [ { "name": "", "type": "address" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [ { "name": "", "type": "address" }, { "name": "", "type": "uint256" } ], "name": "poses", "outputs": [ { "name": "", "type": "uint8" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [ { "name": "", "type": "uint256" } ], "name": "prices", "outputs": [ { "name": "", "type": "uint32" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "v_dices", "outputs": [ { "name": "dices_", "type": "uint8[]" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "v_prices", "outputs": [ { "name": "", "type": "uint32[]" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [ { "name": "i", "type": "uint256" } ], "name": "v_viewrow", "outputs": [ { "name": "", "type": "uint16[]" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "viewBoard", "outputs": [ { "name": "players_", "type": "address[]" }, { "name": "cashes_", "type": "uint256[]" }, { "name": "poses_", "type": "uint8[2][]" }, { "name": "owners_", "type": "address[]" }, { "name": "buidings_", "type": "uint16[]" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "viewGame", "outputs": [ { "name": "", "type": "uint8" }, { "name": "", "type": "uint8" }, { "name": "", "type": "uint256[]" }, { "name": "", "type": "uint32[]" } ], "payable": false, "stateMutability": "view", "type": "function" } ]


		함수 목록 

			- 실사용 목적 

				function start() public 
					- 호출시 게임 시작 첫번째 주사위 생성 
					- 현재 아무나 아무시점에 (최소인원 충족 상관 없이) 호출하면 현재의 인원만 가지고 게임 시작

				function join() public 
					- msg.sender를 게임에 참가시킴 

						GameEvent(2,<msg.sender 주소>)
						혹은  
						GameEvent(3,<msg.sender 주소>)
						을 각각 성공 실패시 발생시킴 

				function action(uint8[] actionids, uint[] params) public
					- 수행할 액션을 보냄 		

						GameEvent(4,<msg.sender 주소>)
						혹은  
						GameEvent(5,<msg.sender 주소>)
						을 각각 성공 실패시 발생시킴

				function viewBoard() public view returns(address[] players_,uint[] cashes_, uint8[2][] poses_, address[] owners_ ,uint16[] buidings_)
					-보드의 상태를 반환함 

				function viewGame() public view returns(uint8 N,uint8 M,uint[] walls,uint32[] prices)	
					- 보드의 정적인 정보를 반환함, 벽위치, 가격목록
					- 벽정보는 이진수로 해석해야함 





			- 테스트 목적 			

				테스트 목적의 함수들 중 아래의 두 함수는 보내는 플레이어 주소를 조작할 수 있게 해준다. 실제로 여러 메타마스크 계정을 번갈아가면서 테스트하지 않아도 되게 해준다. 실제 존재하지 않는 아무 주소값을 넘겨도 된다.

					join_i : 주소를 인자로 넘기면 그 주소의 플레이어가 참여하고자 하는 것으로 여긴다.

					action_i : action의 마지막 인자로 주소값을 보내면 그 주소의 플레이어가 수행명령을 내린것으로 간주한다.  

				아래의 테스트함수들은 게임을 실제보다 더 신속하게 진행시켜 테스트하기 위함이다. 
					
					function sum_moves_i() public : 강제로 모든 수행명령이 집계된다. 명령이 수행명령을 날리지 않은 플레이어는 디폴트 동작을 수행하게 된다. 현재 디폴트 동작은 주사위가 나온칸만큼 아무 방향으로나 이동하고, 주인없는 땅에 대한 bid 는 진행하지 않으며, fee 로 내야할 돈이 부족할 시 id 가 낮은 소유지부터 매각하여 돈을 충당한다. 자동으로 다음턴의 주사위도 생성한다. 



	Creator_v0.13.sol

		- 주소 : 0x046840ac74cb87b1eb04c3b683ef9ed7258ce858

		- ABI : [ { "constant": false, "inputs": [ { "name": "mapid", "type": "uint256" }, { "name": "wait", "type": "uint256" } ], "name": "createGame", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [ { "name": "page", "type": "uint256" } ], "name": "fetchGames", "outputs": [ { "name": "list", "type": "address[10]" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "aaa", "outputs": [ { "name": "a", "type": "uint256[]" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [ { "name": "width", "type": "uint256" }, { "name": "height", "type": "uint256" }, { "name": "playermin", "type": "uint256" }, { "name": "playermax", "type": "uint256" }, { "name": "dicemin", "type": "uint256" }, { "name": "dicemax", "type": "uint256" }, { "name": "walls", "type": "uint256[]" }, { "name": "prices", "type": "uint256[]" } ], "name": "createMap", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [ { "name": "id", "type": "uint256" } ], "name": "fetchMap", "outputs": [ { "name": "info", "type": "uint256[6]" }, { "name": "walls", "type": "uint256[]" }, { "name": "prices", "type": "uint256[]" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "inputs": [], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }, { "anonymous": false, "inputs": [ { "indexed": true, "name": "id", "type": "uint256" }, { "indexed": true, "name": "owner", "type": "address" }, { "indexed": true, "name": "addr", "type": "address" } ], "name": "creation", "type": "event" } ]


	Creator_v0.14.sol

		- 주소 : 0xECAa98250ED94E16c10a86467F609998De2B1abA

		- ABI : [ { "constant": false, "inputs": [], "name": "creatBasicGame", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "mapid", "type": "uint256" }, { "name": "wait", "type": "uint256" } ], "name": "createGame", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "width", "type": "uint8" }, { "name": "height", "type": "uint8" }, { "name": "playermin", "type": "uint8" }, { "name": "playermax", "type": "uint8" }, { "name": "dicemin", "type": "uint8" }, { "name": "dicemax", "type": "uint8" }, { "name": "walls_", "type": "uint256[]" }, { "name": "prices_", "type": "uint32[]" } ], "name": "createMap", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "anonymous": false, "inputs": [ { "indexed": true, "name": "requester", "type": "address" }, { "indexed": true, "name": "_type", "type": "uint256" }, { "indexed": true, "name": "value", "type": "uint256" } ], "name": "CreatorEvent", "type": "event" }, { "inputs": [], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }, { "constant": true, "inputs": [ { "name": "page", "type": "uint256" } ], "name": "fetchGames", "outputs": [ { "name": "list", "type": "address[10]" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [ { "name": "id", "type": "uint256" } ], "name": "fetchMap", "outputs": [ { "name": "info_", "type": "uint8[6]" }, { "name": "walls_", "type": "uint256[]" }, { "name": "prices_", "type": "uint32[]" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "viewNumGames", "outputs": [ { "name": "", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "viewNumMaps", "outputs": [ { "name": "", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" } ]


		- 시간조건을 제외한 기본적인 기능은 모두 실제 구현 된 상태 ! 

		- Game_v0.15.sol과 연동되어 있다. 

		- event: 
			이벤트의 시그니처는 

			0xc19442a910aef435ef1b0a1e5efbbf53c422c88ff36b025627b3d70cd4c6db03

			filter 설정시에 이벤트 시그니처는 null로 설정해도 상관 없다. 어차피 한시그니처의 이벤트만 발생하기 때문

			CreatorEvent(address sender,uint type,uint val)

			- 첫번째 토픽은 항상 시그니처 
			- 두번째 토픽 (첫번째 인자)는 요청자의 주소이다. 
			- 세번째 토픽 (두번째 인자)는 이벤트 종류이다.
			- 네번째 토픽 (세번째 인자)는 값이다. 주소가 될수도 정수id 가 될수도 있다.


		- 함수 : 	

			function creatBasicGame() public
				: 테스트 목적으로 하나의 게임을 생성한다. 이 게임은 다음과 같은 맵을 사용한다. 
					1111111111
					1000100001
					1000100001
					1000111111
					1000100001
					1000100001
					1111100001
					1000000001
					1000000001
					1111111111

		    function createGame(uint mapid, uint wait) public {
		    	: 게임을 생성한다. 맵 id 와 대기시간을 입력한다. 대기시간은 현재 아무 작동은 안한다.

		    	: 성공시에 CreatorEvent(송신자주소,1,uint256(게임주소)) 를 반환한다.
		    		- 정확한 주소값이 아닌 uint 변환 값을 반환한다. 
		    		- 실제 필터에서 받아올 때의 차이는 없다 어차피 uint256로 바꾸기 때문 
				
			function createMap(uint8 width, uint8 height, uint8 playermin, uint8 playermax, uint8 dicemin, uint8 dicemax, uint[] walls_, uint32[] prices_) public
		    	:  맵을 생성한다. 

		    	: 성공시에 CreatorEvent(송신자주소,3,맵아이디) 를 반환한다. 

		    function fetchMap(uint id) public view returns (uint8[6] info_,uint[] walls_,uint32[] prices_){
		    	: 맵 id 를 넣고 맵정보를 가져온다.

		    function fetchGames(uint page) public view returns (address[10] list){
		    	: page 를 입력하면 page*10 번째부터 페이지* 
		    		(빈 주소는 0x000....000 을 반환한다.)

		    function viewNumGames() public view returns (uint){
		    	: 총 몇개의 게임이 개설되어 있는지 가져온다. 

		    function viewNumMaps() public view returns (uint){
    			: 총 몇개의 맵이 개설되어 있는지 가져온다. 

